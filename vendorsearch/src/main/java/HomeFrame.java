/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.plaf.ProgressBarUI;
import javax.swing.table.DefaultTableModel;

import static java.awt.EventQueue.invokeLater;

/**
 * @author shahan
 */
public class HomeFrame extends javax.swing.JFrame {
    /**
     * Creates new form HomeFrame
     */
    public HomeFrame() {
        initComponents();
        initComponentsCustom();
        scrapperService = new ScrapperService();
        H2JDBCUtils.createResultTable();
        H2JDBCUtils.createProductTable();
        //this.scrapperService.loginToAll();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                scrapperService.quitAll();
                dispose();
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        productNumText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        remoteSearchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vendor Search Tool");
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1400, 800));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Vendor Search Tool");

        productNumText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(102, 153, 0));
        searchBtn.setText("Search");
        searchBtn.setToolTipText("Search from local database");
        searchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        remoteSearchBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        remoteSearchBtn.setForeground(new java.awt.Color(255, 51, 51));
        remoteSearchBtn.setText("Remote Search");
        remoteSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteSearchBtnActionPerformed(evt);
            }
        });

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginToBrowser(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jTable1.setName(""); // NOI18N
        jTable1.setPreferredSize(new java.awt.Dimension(800, 600));
        jTable1.setRowHeight(50);
        jScrollPane1.setViewportView(jTable1);

        jProgressBar1.setString("scrapping....");

        jLabel2.setForeground(new java.awt.Color(50, 0, 255));
        jLabel2.setText("Please wait....");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 51));
        jButton1.setText("LoginToBrowser");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(productNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(27, 27, 27)
                                                                                .addComponent(remoteSearchBtn)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jButton1)
                                                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(0, 72, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jComboBox1)
                                        .addComponent(remoteSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                        .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                        .addComponent(productNumText))
                                .addGap(45, 45, 45)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(414, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginToBrowser(ActionEvent evt) {
        this.showProgressBar();
        class LoginWorker extends SwingWorker<String, Void> {
            @Override
            protected String doInBackground() {
                String vendor = (String) jComboBox1.getSelectedItem();
                if (!vendor.equalsIgnoreCase("all")) {
                    setEnabled(false);
                    scrapperService.login(vendor);
                    setEnabled(true);
                } else {
                    setEnabled(false);
                    scrapperService.loginToAll();
                    setEnabled(true);
                }
                return "done";
            }

            @Override
            protected void done() {
                stopProgressBar();
            }
        }
        new LoginWorker().execute();
    }

    private void searchBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        this.productNumText.setText(this.productNumText.getText().toUpperCase().trim());
        this.showProgressBar();
        class SearchWorker extends SwingWorker<String, Void>  {
            @Override
            protected String doInBackground() {
                if (!productNumText.getText().isBlank()) {
                    setEnabled(false);
                    SearchDetails searchDetailsDb = H2JDBCUtils.getSearchDetails(productNumText.getText());
                    if (searchDetailsDb != null && !searchDetailsDb.getProductDetails().isEmpty()) {
                        searchDetails = searchDetailsDb;
                        mapProductsToTable();
                    } else {
                        JOptionPane.showConfirmDialog(null, "No Record in the database please use 'remote search'",
                                "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        toFront();
                    }
                    setEnabled(true);
                } else {
                    JOptionPane.showConfirmDialog(null, "Please enter product number to search",
                            "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    toFront();
                }
                return "done";
            }

            @Override
            protected void done() {
                stopProgressBar();
            }
        }
        new SearchWorker().execute();
    }

    private void mapProductsToTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        this.searchDetails.getProductDetails().stream().forEach(productDetails1 -> {
            List<String> row = new ArrayList<>();
            if (productDetails1 != null) {
                row.add(productDetails1.getVendor());
                row.add(productDetails1.getPartNumber());
                row.add(productDetails1.getTitle());
                row.add(productDetails1.getDealerPrice());
                row.add(productDetails1.getStock());
                row.add(productDetails1.getLink());
                row.add("<html><u style='color:blue;'>View More</u></html>");
                row.add("<html><u style='color:red;'>Refresh</u></html>");
                model.addRow(row.toArray());
            }
        });
    }

    private void remoteSearchBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_remoteSearchBtnActionPerformed
        this.productNumText.setText(this.productNumText.getText().toUpperCase().trim());
        this.showProgressBar();
        class RemoteSearchWorker extends SwingWorker<String, Void> {

            @Override
            protected String doInBackground() {
                if (!productNumText.getText().isBlank()) {
                    setEnabled(false);
                    List<ProductDetails> productDetails = scrapperService.searchProduct(productNumText.getText(), (String) jComboBox1.getSelectedItem());
                    if (productDetails == null) {
                        JOptionPane.showConfirmDialog(null, "Please Click 'LoginToBrowser' first!",
                                "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        setEnabled(true);
                        toFront();
                        return "Error";
                    } else if (productDetails.isEmpty()) {
                        JOptionPane.showConfirmDialog(null, "No Data Found!",
                                "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        setEnabled(true);
                        toFront();
                        return "Error";
                    }
                    searchDetails.setSearchStr(productNumText.getText());
                    searchDetails.setSearchTime(LocalDateTime.now().toString());
                    searchDetails.getProductDetails().clear();
                    searchDetails.getProductDetails().addAll(productDetails.stream().filter(productDetails1 -> productDetails1 != null).collect(Collectors.toList()));
                    H2JDBCUtils.insertOrUpdateSearchResult(searchDetails);
                    mapProductsToTable();
                    setEnabled(true);
                    return "done";
                } else {
                    JOptionPane.showConfirmDialog(null, "Please enter product number to search",
                            "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    toFront();
                    return "Error";
                }
            }

            @Override
            protected void done() {
                stopProgressBar();
            }
        }
        new RemoteSearchWorker().execute();

    }

    private void initComponentsCustom() {
        this.jProgressBar1.setVisible(false);
        this.jLabel2.setVisible(false);
        this.setResizable(true);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(ScrapperPageFactory.getAllAvailablePages().toArray()));
        String[] columnNames = {"Vendor", "Part Number", "Product Name", "Cost", "Availability", "URL", "", ""};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        //<html><u style='color:blue;'>View More</u></html>","<html><u style='color:red;'>Refresh</u></html>
        jTable1.setModel(tableModel);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(350);
        Action viewMore = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                JTable table = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                System.out.println("View More" + modelRow);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                String valueAt = (String) model.getValueAt(modelRow, 1);
                List<ProductDetails> collect = searchDetails.getProductDetails().stream()
                        .filter(productDetails1 -> productDetails1.getPartNumber().equals(valueAt))
                        .collect(Collectors.toList());
                if (collect.size() > 0) {
                    JOptionPane.showConfirmDialog(null, "Part Num:" + collect.get(0).getPartNumber()
                                    + "\nTitle: " + collect.get(0).getTitle() + "\nDescription: " + collect.get(0).getDescription()
                                    + "\nPack Size: " + collect.get(0).getPackSize() + "\nQty: " + collect.get(0).getSpecifications()
                                    + "\nStock: " + collect.get(0).getStock() + "\nStock Details: " + collect.get(0).getStockDetails()
                                    + "\nList price: " + collect.get(0).getListPrice() + "\nDealer Price: " + collect.get(0).getDealerPrice(),
                            "Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
                }

            }
        };
        Action refresh = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                JTable table = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                System.out.println("Refresh " + modelRow);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                String vendor = (String) model.getValueAt(modelRow, 0);
                if (!vendor.isBlank()) {
                    showProgressBar();
                    class RefreshWorker extends SwingWorker<String, Void> {
                        @Override
                        protected String doInBackground() {
                            setEnabled(false);
                            List<ProductDetails> productDetailsList;
                            productDetailsList = scrapperService.searchProduct(searchDetails.getSearchStr(), vendor);
                            if (productDetailsList == null) {
                                JOptionPane.showConfirmDialog(null, "Please Click 'LoginToBrowser' first!",
                                        "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                                setEnabled(true);
                                return "Error";
                            }
                            if (!productDetailsList.isEmpty()) {
                                searchDetails.getProductDetails().set(modelRow, productDetailsList.get(0));
                                H2JDBCUtils.updateProductDetails(productDetailsList.get(0), searchDetails.getSearchStr());
                                mapProductsToTable();
                            } else if (productDetailsList.isEmpty()) {
                                JOptionPane.showConfirmDialog(null, "No Data Found!",
                                        "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                                return "Error";
                            }
                            setEnabled(true);
                            return "done";
                        }

                        @Override
                        protected void done() {
                            stopProgressBar();
                        }
                    }
                    new RefreshWorker().execute();
                }
            }
        };

        ButtonColumn buttonColumn = new ButtonColumn(jTable1, viewMore, 6);
        ButtonColumn buttonColumn1 = new ButtonColumn(jTable1, refresh, 7);
        jTable1.setRowHeight(50);
        jTable1.setFont(new Font("Arial", Font.PLAIN, 13));
        //fastMode.setSelected(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        invokeLater(new Runnable() {
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }

    private void showProgressBar(){
        this.jLabel2.setVisible(true);
        this.jProgressBar1.setVisible(true);
        this.jProgressBar1.setIndeterminate(true);
    }

    private void stopProgressBar(){
        this.jLabel2.setVisible(false);
        this.jProgressBar1.setVisible(false);
        this.jProgressBar1.setIndeterminate(false);
    }

    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField productNumText;
    private javax.swing.JButton remoteSearchBtn;
    private javax.swing.JButton searchBtn;
    private ScrapperService scrapperService = new ScrapperService();
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JButton jButton1;
    private SearchDetails searchDetails = new SearchDetails();
    // End of variables declaration//GEN-END:variables
}
